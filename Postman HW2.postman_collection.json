{
	"info": {
		"_postman_id": "43c8091c-ca41-4a7b-ad4c-5c0ca6e20e32",
		"name": "Postman HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26813029"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками)\r",
							"pm.test(\"Check name\", function (){\r",
							"    pm.expect(jsonData.name).to.eql(\"Valeriya\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками)\r",
							"pm.test(\"Check age\", function (){\r",
							" pm.expect(jsonData.age).to.eql(\"97\");\r",
							"});   \r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками)\r",
							"pm.test(\"Check salary\", function (){\r",
							"pm.expect(jsonData.salary).to.eql(10000);\r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"let reqData = request.data;\r",
							"console.log(reqData);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check name\", function (){\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test (\"Check age\", function (){\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"Check salary\", function (){\r",
							"pm.expect(jsonData.salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check salary_1_5\", function(){\r",
							"pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqData.salary * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Valeriya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "97",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "10000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5008/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5008",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//Спарсить request.\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"console.log(reqData);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check name\", function (){\r",
							"pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"Check age\", function(){\r",
							"pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"Check salary\", function(){\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check that dog contains name\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"}); \r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check that dog contains age\", function(){\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check that dog's name is Luky\", function(){\r",
							"pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check that age is 4\", function(){\r",
							"pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5008/object_info_3?name=Pisya&age=19&salary=50000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5008",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Pisya"
						},
						{
							"key": "age",
							"value": "19"
						},
						{
							"key": "salary",
							"value": "50000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function(){\r",
							"pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age\", function(){\r",
							"pm.expect(jsonData.age).to.eql(+reqData.age);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(reqData.salary);\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function(){\r",
							"pm.expect(jsonData.salary[0]).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary*2\", function(){\r",
							"pm.expect(+jsonData.salary[1]).to.eql(+reqData.salary * 2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary*3\", function(){\r",
							"pm.expect(+jsonData.salary[2]).to.eql(+reqData.salary * 3);\r",
							"});\r",
							"\r",
							"//Создать в окружении переменную name\r",
							"//Создать в окружении переменную age\r",
							"//Создать в окружении переменную salary\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"//Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age)\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for(i in jsonData.salary) {console.log(jsonData.salary[i]);}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5008/object_info_4?name=Sasha&age=24&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5008",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Sasha"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в salary\r",
							"let ENVsalary = pm.environment.get(\"salary\");\r",
							"\r",
							"//Вставить параметр age из окружения в age\r",
							"let ENVage = pm.environment.get(\"age\");\r",
							"\r",
							"//Вставить параметр name из окружения в name\r",
							"let ENVname = pm.environment.get(\"name\");\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let reqData = request.data;\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check response: start_qa_salary\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"}); \r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check response: qa_salary_after_6_months\", function(){\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check response: qa_salary_after_12_months\", function(){\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check response: qa_salary_after_1.5_year\", function(){\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check response: qa_salary_after_3.5_years\", function(){\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check response: person\", function(){\r",
							"pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check start_qa_salary = salary\", function(){\r",
							"pm.expect(jsonData.start_qa_salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months=salary*2\", function(){\r",
							"pm.expect(jsonData.qa_salary_after_6_months).to.eql(+reqData.salary * 2);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months=salary*2.7\", function(){\r",
							"pm.expect(jsonData.qa_salary_after_12_months).to.eql(+reqData.salary * 2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_1.5_year=salary*3.3\", function(){\r",
							"pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(reqData.salary * 3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_years = salary*3.8\", function(){\r",
							"pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(reqData.salary*3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check u_name\", function(){\r",
							"pm.expect(jsonData.person.u_name[1]).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check u_age\", function(){\r",
							"pm.expect(jsonData.person.u_age).to.eql(+reqData.age);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check u_salary_5_years = salary*4.2\", function(){\r",
							"pm.expect(jsonData.person.u_salary_5_years).to.eql(+reqData.salary*4.2);\r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person (в формате \"ключ = значение\" )\r",
							"for(i in jsonData.person){console.log(`${i} = ${jsonData.person[i]}`);}\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person (только ключ (имя))\r",
							"for (i in jsonData.person){console.log(`${i}`);}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Zhora",
							"type": "text"
						},
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5008/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5008",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": null,
							"disabled": true
						},
						{
							"key": "age",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}